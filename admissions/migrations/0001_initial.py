# Generated by Django 5.2 on 2025-06-01 08:27

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicQualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_passed', models.CharField(help_text="Enter the name of the exam passed (e.g., Matriculation, FSc, Bachelor's).", max_length=100)),
                ('passing_year', models.PositiveIntegerField(help_text='Enter the year the exam was passed.')),
                ('marks_obtained', models.PositiveIntegerField(blank=True, help_text='Enter the marks obtained in the exam.', null=True)),
                ('total_marks', models.PositiveIntegerField(blank=True, help_text='Enter the total possible marks for the exam.', null=True)),
                ('division', models.CharField(blank=True, help_text='Enter the division or grade obtained (e.g., 1st Division, A+).', max_length=50)),
                ('subjects', models.TextField(blank=True, help_text='List the subjects studied in this qualification.')),
                ('board', models.CharField(blank=True, help_text='Enter the name of the examining board or university (optional).', max_length=200)),
                ('certificate_file', models.FileField(blank=True, help_text='Upload the certificate or transcript for this qualification.', null=True, upload_to='academic_certificates/%Y/%m/')),
            ],
        ),
        migrations.CreateModel(
            name='AcademicSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the name of the academic session (e.g., '2021-2025', 'Fall 2021-Spring 2025')", max_length=50)),
                ('start_year', models.IntegerField(help_text='Enter the starting year of this academic session (e.g., 2021)')),
                ('end_year', models.IntegerField(help_text='Enter the ending year of this academic session (e.g., 2025)')),
                ('is_active', models.BooleanField(default=False, help_text='Check this if this is the current academic session. Only one session can be active at a time.')),
                ('description', models.TextField(blank=True, help_text='Optional: Add any additional information about this academic session')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Academic Session',
                'verbose_name_plural': 'Academic Sessions',
                'ordering': ['-start_year'],
            },
        ),
        migrations.CreateModel(
            name='ExtraCurricularActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.CharField(blank=True, help_text='Describe the extra-curricular activity (e.g., Debate Club, Football Team).', max_length=200)),
                ('position', models.CharField(blank=True, help_text='Enter any position held in the activity (e.g., Captain, Secretary).', max_length=100)),
                ('achievement', models.CharField(blank=True, help_text='Describe any achievements in the activity (e.g., Won 1st Prize).', max_length=200)),
                ('activity_year', models.PositiveIntegerField(blank=True, help_text='Enter the year this activity took place.', null=True)),
                ('certificate_file', models.FileField(blank=True, help_text='Upload certificate or proof of participation/achievement.', null=True, upload_to='extra_curricular_certificates/%Y/%m/')),
            ],
        ),
        migrations.CreateModel(
            name='AdmissionCycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_start', models.DateField(help_text='Select the date when applications open for this cycle.')),
                ('application_end', models.DateField(help_text='Select the deadline for submitting applications in this cycle.')),
                ('is_open', models.BooleanField(default=False, help_text='Check this if the application submission is currently open for this cycle.')),
                ('program', models.ForeignKey(help_text='Select the academic program for this admission cycle.', on_delete=django.db.models.deletion.CASCADE, to='academics.program')),
                ('session', models.ForeignKey(help_text='Select the academic session this admission cycle belongs to.', on_delete=django.db.models.deletion.CASCADE, to='admissions.academicsession')),
            ],
        ),
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], help_text="Select the current status of the applicant's application.", max_length=20)),
                ('applied_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the application was submitted.')),
                ('applicant_photo', models.ImageField(blank=True, help_text='Upload a recent passport-sized photograph of the applicant.', upload_to='photos/')),
                ('full_name', models.CharField(help_text="Enter the applicant's full name.", max_length=100)),
                ('religion', models.CharField(help_text="Enter the applicant's religion.", max_length=50)),
                ('caste', models.CharField(blank=True, help_text="Enter the applicant's caste (optional).", max_length=50)),
                ('cnic', models.CharField(help_text="Enter the applicant's CNIC or B-form number.", max_length=15)),
                ('dob', models.DateField(help_text="Select the applicant's date of birth.")),
                ('contact_no', models.CharField(help_text="Enter the applicant's primary contact phone number.", max_length=15)),
                ('identification_mark', models.TextField(blank=True, help_text="Describe any visible identification mark on the applicant's body (optional).")),
                ('father_name', models.CharField(help_text="Enter the full name of the applicant's father or guardian.", max_length=100)),
                ('father_occupation', models.CharField(help_text="Enter the occupation of the applicant's father or guardian.", max_length=100)),
                ('father_cnic', models.CharField(blank=True, help_text="Enter the CNIC of the applicant's father or guardian (optional).", max_length=15)),
                ('monthly_income', models.PositiveIntegerField(blank=True, help_text='Enter the approximate monthly income of the father or guardian.', null=True)),
                ('relationship', models.CharField(choices=[('father', 'Father'), ('guardian', 'Guardian')], help_text='Select the relationship of the listed person to the applicant.', max_length=50)),
                ('permanent_address', models.TextField(help_text="Enter the applicant's permanent home address.")),
                ('declaration', models.BooleanField(default=False, help_text='Check this box to confirm that the applicant agrees to the terms and conditions.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time this applicant record was created.')),
                ('department', models.ForeignKey(help_text='Select the department the applicant is applying to.', on_delete=django.db.models.deletion.CASCADE, to='academics.department')),
                ('faculty', models.ForeignKey(help_text='Select the faculty the applicant is applying to.', on_delete=django.db.models.deletion.CASCADE, to='academics.faculty')),
                ('program', models.ForeignKey(help_text='Select the specific program the applicant is applying for.', on_delete=django.db.models.deletion.CASCADE, to='academics.program')),
            ],
        ),
    ]
