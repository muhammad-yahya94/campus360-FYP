# Generated by Django 5.2 on 2025-07-10 18:12

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('max_points', models.PositiveIntegerField()),
                ('resource_file', models.FileField(blank=True, max_length=255, null=True, upload_to='assignments/resources/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'assignments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, help_text='Rich text content of the submission.')),
                ('file', models.FileField(blank=True, help_text='The file submitted by the student.', null=True, upload_to='submissions/')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the submission was made.')),
                ('marks_obtained', models.PositiveIntegerField(blank=True, help_text='Marks obtained by the student for this submission.', null=True)),
                ('feedback', models.TextField(blank=True, help_text='Feedback from the teacher on this submission.')),
                ('graded_at', models.DateTimeField(blank=True, help_text='The date and time when the submission was graded.', null=True)),
            ],
            options={
                'verbose_name': 'Assignment Submission',
                'verbose_name_plural': 'Assignment Submissions',
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('leave', 'Leave')], default='present', max_length=10)),
                ('shift', models.CharField(blank=True, choices=[('morning', 'Morning'), ('evening', 'Evening')], max_length=10, null=True)),
                ('recorded_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['date', 'student'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opt', models.BooleanField(default=False)),
                ('code', models.CharField(help_text='Enter the unique course code (e.g., CS101).', max_length=10, unique=True)),
                ('name', models.CharField(help_text='Enter the full name of the course (e.g., Introduction to Programming).', max_length=200)),
                ('credits', models.PositiveIntegerField(help_text='Enter the number of credit hours for this course.')),
                ('lab_work', models.IntegerField(default=0, help_text='Enter the number of lab hours per week for this course (if applicable).')),
                ('is_active', models.BooleanField(default=True, help_text='Check this if the course is currently active and can be offered.')),
                ('description', models.TextField(blank=True, help_text='Provide a brief description or syllabus summary for the course.')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='CourseOffering',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Check if this course offering is currently active for enrollment.')),
                ('current_enrollment', models.IntegerField()),
                ('shift', models.CharField(choices=[('morning', 'Morning'), ('evening', 'Evening'), ('both', 'Both')], default='morning', help_text='Select the shift for this course offering.', max_length=10)),
                ('offering_type', models.CharField(choices=[('core', 'Core / Compulsory'), ('major', 'Major'), ('minor', 'Minor'), ('elective', 'Elective'), ('foundation', 'Foundation'), ('gen_ed', 'General Education'), ('lab', 'Lab / Practical'), ('seminar', 'Seminar'), ('capstone', 'Capstone / Final Project'), ('internship', 'Internship / Training'), ('service', 'Service Course'), ('remedial', 'Remedial / Non-Credit')], default='core', help_text='Specify how this course offering fits into a program.', max_length=30)),
            ],
            options={
                'verbose_name': 'Course Offering',
                'verbose_name_plural': 'Course Offerings',
            },
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('midterm_obtained', models.PositiveIntegerField(blank=True, help_text='Marks obtained in Midterm Exam.', null=True)),
                ('midterm_total', models.PositiveIntegerField(default=100, help_text='Total marks for Midterm Exam.')),
                ('final_obtained', models.PositiveIntegerField(blank=True, help_text='Marks obtained in Final Exam.', null=True)),
                ('final_total', models.PositiveIntegerField(default=100, help_text='Total marks for Final Exam.')),
                ('sessional_obtained', models.PositiveIntegerField(blank=True, help_text='Marks obtained in Sessional.', null=True)),
                ('sessional_total', models.PositiveIntegerField(default=50, help_text='Total marks for Sessional.')),
                ('project_obtained', models.PositiveIntegerField(blank=True, help_text='Marks obtained in Project.', null=True)),
                ('project_total', models.PositiveIntegerField(default=100, help_text='Total marks for Project.')),
                ('practical_obtained', models.PositiveIntegerField(blank=True, help_text='Marks obtained in Practical Exam.', null=True)),
                ('practical_total', models.PositiveIntegerField(default=50, help_text='Total marks for Practical Exam.')),
                ('graded_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the result was recorded.')),
                ('remarks', models.TextField(blank=True, help_text="Additional remarks or comments on the student's performance.", null=True)),
            ],
            options={
                'verbose_name': 'Exam Result',
                'verbose_name_plural': 'Exam Results',
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('notice_type', models.CharField(choices=[('general', 'General'), ('academic', 'Academic'), ('event', 'Event'), ('exam', 'Exam'), ('holiday', 'Holiday'), ('other', 'Other')], default='general', max_length=20)),
                ('priority', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', max_length=10)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='notices/attachments/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'])])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('marks', models.PositiveIntegerField(default=1, help_text='Marks for this question.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Topic name for the quiz', max_length=255)),
                ('publish_flag', models.BooleanField(default=False, help_text='Check to make this quiz visible to students.')),
                ('timer_seconds', models.PositiveIntegerField(choices=[(15, '15 seconds'), (30, '30 seconds'), (45, '45 seconds'), (60, '1 minute')], default=30, help_text='Duration per question for all questions.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuizSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('score', models.PositiveIntegerField(default=0)),
                ('answers', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='StudyMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=200)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('useful_links', models.TextField(blank=True, help_text='Enter URLs separated by newlines')),
                ('video_link', models.URLField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='study_materials/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TimetableSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the venue (e.g., Room , Lab A).', max_length=100)),
                ('capacity', models.PositiveIntegerField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
    ]
