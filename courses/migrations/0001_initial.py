# Generated by Django 5.2 on 2025-06-01 08:27

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title of the assignment (e.g., 'Assignment 1: Python Basics').", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description or instructions for the assignment.')),
                ('file', models.FileField(blank=True, help_text='Upload the assignment file (e.g., PDF with questions).', null=True, upload_to='assignments/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the assignment was created.')),
                ('due_date', models.DateTimeField(help_text='The deadline for submitting the assignment.')),
                ('total_marks', models.PositiveIntegerField(default=100, help_text='Total marks for the assignment.')),
                ('is_active', models.BooleanField(default=True, help_text='Check if this assignment is currently active and visible to students.')),
            ],
            options={
                'verbose_name': 'Assignment',
                'verbose_name_plural': 'Assignments',
            },
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='The file submitted by the student.', upload_to='submissions/')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the submission was made.')),
                ('marks_obtained', models.PositiveIntegerField(blank=True, help_text='Marks obtained by the student for this submission.', null=True)),
                ('feedback', models.TextField(blank=True, help_text='Feedback from the teacher on this submission.')),
                ('graded_at', models.DateTimeField(blank=True, help_text='The date and time when the submission was graded.', null=True)),
            ],
            options={
                'verbose_name': 'Assignment Submission',
                'verbose_name_plural': 'Assignment Submissions',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Enter the unique course code (e.g., CS101).', max_length=10, unique=True)),
                ('name', models.CharField(help_text='Enter the full name of the course (e.g., Introduction to Programming).', max_length=200)),
                ('credits', models.PositiveIntegerField(help_text='Enter the number of credit hours for this course.')),
                ('is_active', models.BooleanField(default=True, help_text='Check this if the course is currently active and can be offered.')),
                ('description', models.TextField(blank=True, help_text='Provide a brief description or syllabus summary for the course.')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='CourseOffering',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Check if this course offering is currently active for enrollment.')),
                ('current_enrollment', models.IntegerField()),
                ('offering_type', models.CharField(choices=[('core', 'Core / Compulsory'), ('major', 'Major'), ('minor', 'Minor'), ('elective', 'Elective'), ('foundation', 'Foundation'), ('gen_ed', 'General Education'), ('lab', 'Lab / Practical'), ('seminar', 'Seminar'), ('capstone', 'Capstone / Final Project'), ('internship', 'Internship / Training'), ('service', 'Service Course'), ('remedial', 'Remedial / Non-Credit')], default='core', help_text='Specify how this course offering fits into a program.', max_length=30)),
            ],
            options={
                'verbose_name': 'Course Offering',
                'verbose_name_plural': 'Course Offerings',
            },
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_type', models.CharField(choices=[('midterm', 'Midterm Exam'), ('final', 'Final Exam'), ('sessional', 'Sessoinal'), ('project', 'Project'), ('practical', 'Practical Exam')], help_text='The type of exam (e.g., Midterm, Final).', max_length=20)),
                ('total_marks', models.PositiveIntegerField(default=100, help_text='Total marks for this exam.')),
                ('marks_obtained', models.PositiveIntegerField(help_text='Marks obtained by the student in this exam.')),
                ('graded_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the result was recorded.')),
                ('remarks', models.TextField(blank=True, help_text="Additional remarks or comments on the student's performance.")),
            ],
            options={
                'verbose_name': 'Exam Result',
                'verbose_name_plural': 'Exam Results',
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title of the notice (e.g., 'Exam Schedule Update').", max_length=200)),
                ('content', models.TextField(help_text='The content of the notice.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the notice was created.')),
                ('is_active', models.BooleanField(default=True, help_text='Check if this notice is currently visible to students.')),
            ],
            options={
                'verbose_name': 'Notice',
                'verbose_name_plural': 'Notices',
            },
        ),
        migrations.CreateModel(
            name='StudyMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title of the study material (e.g., 'Lecture 1 Notes').", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Brief description of the study material.')),
                ('file', models.FileField(help_text='Upload the study material file (e.g., PDF, PPT).', upload_to='study_materials/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the material was uploaded.')),
                ('is_active', models.BooleanField(default=True, help_text='Check if this study material is currently accessible to students.')),
            ],
            options={
                'verbose_name': 'Study Material',
                'verbose_name_plural': 'Study Materials',
            },
        ),
    ]
