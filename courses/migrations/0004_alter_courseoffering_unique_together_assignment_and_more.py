# Generated by Django 5.2 on 2025-05-25 17:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0003_alter_courseoffering_semester_delete_semester'),
        ('faculty_staff', '0003_alter_teacher_designation'),
        ('students', '0003_alter_student_current_semester'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='courseoffering',
            unique_together=set(),
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title of the assignment (e.g., 'Assignment 1: Python Basics').", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description or instructions for the assignment.')),
                ('file', models.FileField(blank=True, help_text='Upload the assignment file (e.g., PDF with questions).', null=True, upload_to='assignments/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the assignment was created.')),
                ('due_date', models.DateTimeField(help_text='The deadline for submitting the assignment.')),
                ('total_marks', models.PositiveIntegerField(default=100, help_text='Total marks for the assignment.')),
                ('is_active', models.BooleanField(default=True, help_text='Check if this assignment is currently active and visible to students.')),
                ('course_offering', models.ForeignKey(help_text='The course offering this assignment belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='courses.courseoffering')),
                ('created_by', models.ForeignKey(help_text='The teacher who created this assignment.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_assignments', to='faculty_staff.teacher')),
            ],
            options={
                'verbose_name': 'Assignment',
                'verbose_name_plural': 'Assignments',
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title of the notice (e.g., 'Exam Schedule Update').", max_length=200)),
                ('content', models.TextField(help_text='The content of the notice.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the notice was created.')),
                ('is_active', models.BooleanField(default=True, help_text='Check if this notice is currently visible to students.')),
                ('course_offering', models.ForeignKey(help_text='The course offering this notice is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='notices', to='courses.courseoffering')),
                ('created_by', models.ForeignKey(help_text='The teacher who created this notice.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_notices', to='faculty_staff.teacher')),
            ],
            options={
                'verbose_name': 'Notice',
                'verbose_name_plural': 'Notices',
            },
        ),
        migrations.CreateModel(
            name='StudyMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title of the study material (e.g., 'Lecture 1 Notes').", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Brief description of the study material.')),
                ('file', models.FileField(help_text='Upload the study material file (e.g., PDF, PPT).', upload_to='study_materials/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the material was uploaded.')),
                ('is_active', models.BooleanField(default=True, help_text='Check if this study material is currently accessible to students.')),
                ('course_offering', models.ForeignKey(help_text='The course offering this study material belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='study_materials', to='courses.courseoffering')),
                ('uploaded_by', models.ForeignKey(help_text='The teacher who uploaded this material.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_materials', to='faculty_staff.teacher')),
            ],
            options={
                'verbose_name': 'Study Material',
                'verbose_name_plural': 'Study Materials',
            },
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='The file submitted by the student.', upload_to='submissions/')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the submission was made.')),
                ('marks_obtained', models.PositiveIntegerField(blank=True, help_text='Marks obtained by the student for this submission.', null=True)),
                ('feedback', models.TextField(blank=True, help_text='Feedback from the teacher on this submission.')),
                ('graded_at', models.DateTimeField(blank=True, help_text='The date and time when the submission was graded.', null=True)),
                ('assignment', models.ForeignKey(help_text='The assignment this submission is for.', on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='courses.assignment')),
                ('graded_by', models.ForeignKey(help_text='The teacher who graded this submission.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_submissions', to='faculty_staff.teacher')),
                ('student', models.ForeignKey(help_text='The student who submitted this assignment.', on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='students.student')),
            ],
            options={
                'verbose_name': 'Assignment Submission',
                'verbose_name_plural': 'Assignment Submissions',
                'unique_together': {('assignment', 'student')},
            },
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_type', models.CharField(choices=[('midterm', 'Midterm Exam'), ('final', 'Final Exam'), ('sessional', 'Sessoinal'), ('project', 'Project'), ('practical', 'Practical Exam')], help_text='The type of exam (e.g., Midterm, Final).', max_length=20)),
                ('total_marks', models.PositiveIntegerField(default=100, help_text='Total marks for this exam.')),
                ('marks_obtained', models.PositiveIntegerField(help_text='Marks obtained by the student in this exam.')),
                ('graded_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the result was recorded.')),
                ('remarks', models.TextField(blank=True, help_text="Additional remarks or comments on the student's performance.")),
                ('course_offering', models.ForeignKey(help_text='The course offering this exam result is for.', on_delete=django.db.models.deletion.CASCADE, related_name='exam_results', to='courses.courseoffering')),
                ('graded_by', models.ForeignKey(help_text='The teacher who graded this exam.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_results', to='faculty_staff.teacher')),
                ('student', models.ForeignKey(help_text='The student this result pertains to.', on_delete=django.db.models.deletion.CASCADE, related_name='exam_results', to='students.student')),
            ],
            options={
                'verbose_name': 'Exam Result',
                'verbose_name_plural': 'Exam Results',
                'unique_together': {('course_offering', 'student', 'exam_type')},
            },
        ),
    ]
