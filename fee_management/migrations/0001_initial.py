# Generated by Django 5.2.3 on 2025-07-19 03:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '__first__'),
        ('admissions', '0001_initial'),
        ('faculty_staff', '0001_initial'),
        ('students', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='FeeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='MeritList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list_number', models.PositiveIntegerField(help_text='Sequence number of this merit list')),
                ('shift', models.CharField(choices=[('morning', 'Morning'), ('evening', 'Evening')], default='Morning', help_text='Shift for the merit list', max_length=10)),
                ('generation_date', models.DateField(auto_now_add=True)),
                ('total_seats', models.PositiveIntegerField(default=0, help_text='Total number of applicants in this merit list')),
                ('seccured_seats', models.PositiveIntegerField(default=0, help_text='Number of seats secured from this merit list')),
                ('valid_until', models.DateTimeField(help_text='Date until which this merit list is valid')),
                ('is_active', models.BooleanField(default=True, help_text='Is this the currently active merit list?')),
                ('notes', models.TextField(blank=True, help_text='Any additional notes about this merit list')),
                ('academic_session', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='merit_lists', to='admissions.academicsession')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='merit_lists', to='academics.program')),
            ],
            options={
                'ordering': ['-generation_date'],
                'unique_together': {('program', 'list_number', 'shift')},
            },
        ),
        migrations.CreateModel(
            name='SemesterFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('shift', models.CharField(choices=[('morning', 'Morning'), ('evening', 'Evening')], help_text='Select the preferred shift for the students.', max_length=10)),
                ('dynamic_fees', models.JSONField(default=dict)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('fee_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='semester_fees', to='fee_management.feetype')),
            ],
        ),
        migrations.CreateModel(
            name='FeeToProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admissions.academicsession')),
                ('programs', models.ManyToManyField(to='academics.program')),
                ('semester_number', models.ManyToManyField(to='academics.semester')),
                ('SemesterFee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='semester_fees', to='fee_management.semesterfee')),
            ],
        ),
        migrations.CreateModel(
            name='StudentFeePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField(auto_now_add=True)),
                ('receipt_number', models.CharField(blank=True, editable=False, max_length=20, null=True, unique=True)),
                ('remarks', models.TextField(blank=True)),
                ('semester_fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='fee_management.semesterfee')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_payments', to='students.student')),
            ],
        ),
        migrations.CreateModel(
            name='MeritListEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('merit_position', models.PositiveIntegerField(help_text='Ranking position in the merit list')),
                ('relevant_percentage', models.DecimalField(decimal_places=2, help_text="Relevant percentage based on program level (Intermediate for BS, Bachelor's for MS)", max_digits=5)),
                ('passing_year', models.PositiveIntegerField(blank=True, help_text='Passing year of the qualification used', null=True)),
                ('marks_obtained', models.DecimalField(blank=True, decimal_places=2, help_text='Marks obtained in the qualification used', max_digits=7, null=True)),
                ('status', models.CharField(choices=[('selected', 'Selected'), ('admitted', 'Admitted')], default='selected', help_text='Current status of the candidate in this merit list', max_length=20)),
                ('selection_date', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, help_text='Any additional remarks about this candidate')),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='merit_list_entries', to='admissions.applicant')),
                ('merit_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='fee_management.meritlist')),
                ('qualification_used', models.ForeignKey(blank=True, help_text='Reference to the academic qualification used for merit calculation', null=True, on_delete=django.db.models.deletion.SET_NULL, to='admissions.academicqualification')),
            ],
            options={
                'ordering': ['merit_position'],
                'unique_together': {('merit_list', 'applicant')},
            },
        ),
        migrations.CreateModel(
            name='FeeVoucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucher_id', models.CharField(editable=False, max_length=50, unique=True)),
                ('due_date', models.DateField()),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('is_paid', models.BooleanField(default=False)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('office', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vouchers', to='faculty_staff.office')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_vouchers', to='academics.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vouchers', to='students.student')),
                ('semester_fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vouchers', to='fee_management.semesterfee')),
                ('payment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='voucher', to='fee_management.studentfeepayment')),
            ],
            options={
                'ordering': ['-generated_at'],
                'unique_together': {('student', 'semester', 'semester_fee')},
            },
        ),
    ]
